@model IEnumerable<GameWebApplication.Models.MagicMeleeRanged>

@{
    ViewData["Title"] = "Index";
}

<h1>Magic, Melee, Ranged!</h1>
<p>Welcome to Magic, Melee, Ranged! This is a simple game, and the rules are exactly like rock, paper, scissors.</p>

<!--Display three columns for the options and explain the rules-->
<div class="row">
    <div class="col-md-4">
        <h2 class="align-middle">Magic</h2>
        <h4 class="align-middle">Magic beats melee, but loses to ranged.</h4>        
        <p>
            Magic has no problem overcoming the metal armor that melee users are so keen on wearing, but
            has trouble penetrating the protective forces surrounding the hides ranged users often wear.
        </p>
    </div>
    <div class="col-md-4">
        <h2 class="align-middle">Melee</h2>
        <h4 class="align-middle">Melee beats ranged, but loses to magic.</h4>
        <p>
            While spells might not be able to break through hide armor, steel can slice through
            it like butter. Metal armor, however, leaves melee users vulnerable to magic.
        </p>
    </div>
    <div class="col-md-4">
        <h2 class="align-middle">Ranged</h2>
        <h4 class="align-middle">Ranged beats magic, but loses to melee.</h4>
        <p>
            Arrows are more precise and less unpredictable than spells, giving ranged users an edge
            over wizards. Arrows can't pierce metal armor though, meaning melee is a good option against archers.
        </p>
    </div>
</div>

<p>
    <a asp-action="Create">Start New Game!</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Win)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Loss)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Tie)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UserChoice)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ComputerChoice)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TimeToChoice)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Win)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Loss)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Tie)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UserChoice)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ComputerChoice)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TimeToChoice)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
